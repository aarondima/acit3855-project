services:
    zookeeper:
        image: wurstmeister/zookeeper
        volumes:
            - zookeeper-data:/opt/zookeeper-3.4.13/data
        healthcheck:
            test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
            interval: 10s
            timeout: 5s
            retries: 3

    kafka:
        image: wurstmeister/kafka
        command: [start-kafka.sh]
        ports:
            - "9092:9092"
        environment:
            KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
            KAFKA_ADVERTISED_HOST_NAME: kafka # docker-machine ip
            KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_BROKER_ID: 1
        volumes:
            - ./data/kafka_data:/var/lib/kafka/kafka-logs
        depends_on:
            zookeeper:
                condition: service_healthy
    db:
        image: mysql
        restart: always
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: 1
            # Change these below
            MYSQL_DATABASE: 'app-db'
            MYSQL_USER: 'user'
            MYSQL_PASSWORD: 'password'
        ports:
            - '3306:3306'
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
            # Where our data will be persisted
            - my-db:/var/lib/mysql

    receiver:
        build:
            context: ./receiver
            dockerfile: Dockerfile.yml
        ports:
            - "8080:8080"
        environment:
            SERVICE_NAME: "receiver"
        volumes:
            - ./configs/test/receiver/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
        depends_on:
            - kafka
    storage:
        build:
            context: ./storage
            dockerfile: Dockerfile.yml
        environment:
            SERVICE_NAME: "storage"
        volumes:
            - ./configs/test/storage/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
        depends_on:
            kafka:
                condition: service_healthy
            db:
                condition: service_healthy
    analyzer:
        build:
            context: ./analyzer
            dockerfile: Dockerfile.yml
        ports:
            - "8110:8110"
        environment:
            SERVICE_NAME: "analyzer"
        volumes:
            - ./configs/test/analyzer/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
        depends_on:
            - kafka
    processing:
        build:
            context: ./processing
            dockerfile: Dockerfile.yml
        ports:
            - "8100:8100"
        environment:
            SERVICE_NAME: "processing"
        volumes:
            - ./configs/test/processing/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
            - ./data/processing:/app/data
        depends_on:
            - storage
# Defines a named volume
volumes:
    my-db:
    zookeeper-data: