services:
    zookeeper:
        image: wurstmeister/zookeeper
        volumes:
            - zookeeper-data:/opt/zookeeper-3.4.13/data
        healthcheck:
            test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
            interval: 10s
            timeout: 5s
            retries: 3

    kafka:
        image: wurstmeister/kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_CREATE_TOPICS: "events:1:1"
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_LOG_DIRS: /kafka/kafka-logs
        volumes:
            - ./data/kafka_data:/kafka/kafka-logs
        depends_on:
            zookeeper:
                condition: service_healthy
        healthcheck:
            test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
            interval: 10s
            timeout: 5s
            retries: 5

    db:
        image: mysql
        restart: always
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: 1
            MYSQL_DATABASE: app-db
            MYSQL_USER: user
            MYSQL_PASSWORD: password
        ports:
            - '3306:3306'
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
            - my-db:/var/lib/mysql

    receiver:
        image: aarondeod/project_receiver:latest
        # ports:
        #     - "8080:8080"
        expose:
            - "8080"
        environment:
            SERVICE_NAME: "receiver"
            CONFIG_FILE: "/app/app_conf.yml"
            LOG_CONF_FILE: "/app/log_conf.yml"
        volumes:
            - ./configs/${ENV}/receiver/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs/receiver:/app/logs
        depends_on:
            - kafka

    storage:
        image: aarondeod/project_storage:latest
        environment:
            SERVICE_NAME: "storage"
            CONFIG_FILE: "/app/app_conf.yml"
            LOG_CONF_FILE: "/app/log_conf.yml"
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_HOSTNAME: ${MYSQL_HOSTNAME}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
        volumes:
            - ./configs/${ENV}/storage/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs/storage:/app/logs
        depends_on:
            kafka:
                condition: service_healthy
            db:
                condition: service_healthy

    analyzer:
        image: aarondeod/project_analyzer:latest
        # ports:
        #     - "8110:8110"
        expose:
            - "8110"
        environment:
            SERVICE_NAME: "analyzer"
            CONFIG_FILE: "/app/app_conf.yml"
            LOG_CONF_FILE: "/app/log_conf.yml"
            CORS_ALLOW_ALL: no
        volumes:
            - ./configs/${ENV}/analyzer/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs/analyzer:/app/logs
        depends_on:
            - kafka

    processing:
        image: aarondeod/project_processing:latest
        # ports:
        #     - "8100:8100"
        expose:
            - "8100"
        environment:
            SERVICE_NAME: "processing"
            CONFIG_FILE: "/app/app_conf.yml"
            LOG_CONF_FILE: "/app/log_conf.yml"
            CORS_ALLOW_ALL: no
        volumes:
            - ./configs/${ENV}/processing/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs/processing:/app/logs
            - ./data/processing:/app/data
        depends_on:
            - storage

    dashboard:
        build:
            context: ./dashboard
            dockerfile: Dockerfile
        ports:
            - "8000:80"
        volumes:
            - ./dashboard/nginx.conf:/etc/nginx/conf.d/default.conf
        environment:
            PROCESSING_URL: ${PROCESSING_URL:-http://processing:8100}
            ANALYZER_URL: ${ANALYZER_URL:-http://analyzer:8110}
        depends_on:
            - processing
            - analyzer
            - storage
            - receiver    

volumes:
    my-db:
    zookeeper-data:
