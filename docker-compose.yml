services:
    zookeeper:
        image: wurstmeister/zookeeper
        volumes:
            - zookeeper-data:/opt/zookeeper-3.4.13/data
        healthcheck:
            test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
            interval: 10s
            timeout: 5s
            retries: 3

    kafka:
        image: wurstmeister/kafka
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_CREATE_TOPICS: "events:1:1"
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        volumes:
            - ./data/kafka_data:/kafka/kafka-logs
        depends_on:
            zookeeper:
                condition: service_healthy
        healthcheck:
            test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
            interval: 10s
            timeout: 5s
            retries: 5

    db:
        image: mysql
        restart: always
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: 1
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        ports:
            - '3306:3306'
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
            - my-db:/var/lib/mysql

    receiver:
        build:
            context: ./receiver
            dockerfile: Dockerfile
        ports:
            - "${RECEIVER_PORT:-8080}:8080"
        environment:
            SERVICE_NAME: "receiver"
            ENV: ${ENV:-dev}
        volumes:
            - ./configs/${ENV:-dev}/receiver/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
        depends_on:
            - kafka

    storage:
        build:
            context: ./storage
            dockerfile: Dockerfile
        environment:
            SERVICE_NAME: "storage"
            ENV: ${ENV:-dev}
        volumes:
            - ./configs/${ENV:-dev}/storage/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
        depends_on:
            kafka:
                condition: service_healthy
            db:
                condition: service_healthy

    analyzer:
        build:
            context: ./analyzer
            dockerfile: Dockerfile
        ports:
            - "${ANALYZER_PORT:-8110}:8110"
        environment:
            SERVICE_NAME: "analyzer"
            ENV: ${ENV:-dev}
        volumes:
            - ./configs/${ENV:-dev}/analyzer/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
        depends_on:
            - kafka

    processing:
        build:
            context: ./processing
            dockerfile: Dockerfile
        ports:
            - "${PROCESSING_PORT:-8100}:8100"
        environment:
            SERVICE_NAME: "processing"
            ENV: ${ENV:-dev}
        volumes:
            - ./configs/${ENV:-dev}/processing/app_conf.yml:/app/app_conf.yml
            - ./configs/log_conf.yml:/app/log_conf.yml
            - ./logs:/app/logs
            - ./data/processing:/app/data
        depends_on:
            - storage

    dashboard:
        build:
            context: ./dashboard
            dockerfile: Dockerfile
        ports:
            - "${DASHBOARD_PORT:-3000}:80"
        environment:
            ENV: ${ENV:-dev}
            PROCESSING_URL: ${PROCESSING_URL:-http://processing:8100}
            ANALYZER_URL: ${ANALYZER_URL:-http://analyzer:8110}
        depends_on:
            - processing
            - analyzer

volumes:
    my-db:
    zookeeper-data: